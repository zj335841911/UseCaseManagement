<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper	namespace="cn.ibizlab.pms.core.zentao.mapper.BuildMapper">

    <!--该方法用于重写mybatis中selectById方法，以实现查询逻辑属性-->
	<select id="selectById"  resultMap="BuildResultMap" databaseId="mysql">
        <![CDATA[select t1.* from (SELECT t1.`BRANCH`, t1.`BUGS`, t1.`BUILDER`, t1.BUILDER AS `BUILDERPK`, t1.`DATE`, t1.`DELETED`, t1.`DESC`, t1.`FILEPATH`, t1.`ID`, t1.`NAME`, t1.`PRODUCT`, t11.`NAME` AS `PRODUCTNAME`, t1.`PROJECT`, t1.`SCMPATH`, t1.`STORIES` FROM `zt_build` t1  LEFT JOIN `zt_product` t11 ON t1.`PRODUCT` = t11.`ID`  ) t1 where id=#{id}]]>
    </select>

    <!--通过mybatis将查询结果注入到entity中,通过配置autoMapping="true"由mybatis自动处理映射关系 -->
    <resultMap id="BuildResultMap" type="cn.ibizlab.pms.core.zentao.domain.Build" autoMapping="true">
		<id property="id" column="id" /><!--主键字段映射-->
		<result property="product" column="product" />
		<result property="branch" column="branch" />
		<result property="project" column="project" />


		<!--通过mybatis自动注入关系属性[主实体]，fetchType="lazy"为懒加载配置 -->
		<association property="ztbranch" javaType="cn.ibizlab.pms.core.zentao.domain.Branch" column="branch" select="cn.ibizlab.pms.core.zentao.mapper.BranchMapper.selectById" fetchType="lazy"></association>
		<!--通过mybatis自动注入关系属性[主实体]，fetchType="lazy"为懒加载配置 -->
		<association property="ztproduct" javaType="cn.ibizlab.pms.core.zentao.domain.Product" column="product" select="cn.ibizlab.pms.core.zentao.mapper.ProductMapper.selectById" fetchType="lazy"></association>
		<!--通过mybatis自动注入关系属性[主实体]，fetchType="lazy"为懒加载配置 -->
		<association property="ztproject" javaType="cn.ibizlab.pms.core.zentao.domain.Project" column="project" select="cn.ibizlab.pms.core.zentao.mapper.ProjectMapper.selectById" fetchType="lazy"></association>
    </resultMap>

	<!--关系实体暴露select方法供主实体通过外键查询关系实体数据[实体关系名称:DER1N_ZT_BUILD_ZT_BRANCH_BRANCH] -->
	 <select id="selectByBranch" resultMap="BuildResultMap">
         select t1.* from (
                <include refid="Default" />
			 ) t1
			 where  branch=#{id}
     </select>
	<!--关系实体暴露select方法供主实体通过外键查询关系实体数据[实体关系名称:DER1N_ZT_BUILD_ZT_PRODUCT_PRODUCT] -->
	 <select id="selectByProduct" resultMap="BuildResultMap">
         select t1.* from (
                <include refid="Default" />
			 ) t1
			 where  product=#{id}
     </select>
	<!--关系实体暴露select方法供主实体通过外键查询关系实体数据[实体关系名称:DER1N_ZT_BUILD_ZT_PROJECT_PROJECT] -->
	 <select id="selectByProject" resultMap="BuildResultMap">
         select t1.* from (
                <include refid="Default" />
			 ) t1
			 where  project=#{id}
     </select>

    <!--数据集合[BugProductBuild]-->
	 <select id="searchBugProductBuild"  parameterType="cn.ibizlab.pms.core.zentao.filter.BuildSearchContext"  resultMap="BuildResultMap">
	 	select * from (
         select t1.* from (
                <include refid="BugProductBuild" />
         )t1
         <where><if test="ew!=null and ew.sqlSegment!=null and !ew.emptyOfWhere">${ew.sqlSegment}</if></where>
         <if test="ew!=null and ew.sqlSegment!=null and ew.emptyOfWhere">${ew.sqlSegment}</if>
		 )t1
		 order by `id`  desc  
     </select>

    <!--数据集合[CurProduct]-->
	 <select id="searchCurProduct"  parameterType="cn.ibizlab.pms.core.zentao.filter.BuildSearchContext"  resultMap="BuildResultMap">
         select t1.* from (
                <include refid="CurProduct" />
         )t1
         <where><if test="ew!=null and ew.sqlSegment!=null and !ew.emptyOfWhere">${ew.sqlSegment}</if></where>
         <if test="ew!=null and ew.sqlSegment!=null and ew.emptyOfWhere">${ew.sqlSegment}</if>
     </select>

    <!--数据集合[Default]-->
	 <select id="searchDefault"  parameterType="cn.ibizlab.pms.core.zentao.filter.BuildSearchContext"  resultMap="BuildResultMap">
         select t1.* from (
                <include refid="Default" />
         )t1
         <where><if test="ew!=null and ew.sqlSegment!=null and !ew.emptyOfWhere">${ew.sqlSegment}</if></where>
         <if test="ew!=null and ew.sqlSegment!=null and ew.emptyOfWhere">${ew.sqlSegment}</if>
     </select>

    <!--数据集合[TestBuild]-->
	 <select id="searchTestBuild"  parameterType="cn.ibizlab.pms.core.zentao.filter.BuildSearchContext"  resultMap="BuildResultMap">
         select t1.* from (
                <include refid="TestBuild" />
         )t1
         <where><if test="ew!=null and ew.sqlSegment!=null and !ew.emptyOfWhere">${ew.sqlSegment}</if></where>
         <if test="ew!=null and ew.sqlSegment!=null and ew.emptyOfWhere">${ew.sqlSegment}</if>
     </select>

    <!--数据集合[TestRounds]-->
	 <select id="searchTestRounds"  parameterType="cn.ibizlab.pms.core.zentao.filter.BuildSearchContext"  resultMap="BuildResultMap">
         select t1.* from (
                <include refid="TestRounds" />
         )t1
         <where><if test="ew!=null and ew.sqlSegment!=null and !ew.emptyOfWhere">${ew.sqlSegment}</if></where>
         <if test="ew!=null and ew.sqlSegment!=null and ew.emptyOfWhere">${ew.sqlSegment}</if>
     </select>

    <!--数据集合[UpdateLog]-->
	 <select id="searchUpdateLog"  parameterType="cn.ibizlab.pms.core.zentao.filter.BuildSearchContext"  resultMap="BuildResultMap">
	 	select * from (
         select t1.* from (
                <include refid="UpdateLog" />
         )t1
         <where><if test="ew!=null and ew.sqlSegment!=null and !ew.emptyOfWhere">${ew.sqlSegment}</if></where>
         <if test="ew!=null and ew.sqlSegment!=null and ew.emptyOfWhere">${ew.sqlSegment}</if>
		 )t1
		 order by `date`  desc , `id`   desc
     </select>

    <!--数据查询[BugProductBuild]-->
    <sql id="BugProductBuild" databaseId="mysql">
		<![CDATA[ select t1.* from (select 0 as `BRANCH`, 	'' as `BUILDER`, 	null as `DATE`, 	'0' AS `DELETED`, 	'' AS `FILEPATH`, 	100000000 AS `ID`, 	'trunk' AS `IDs`, 	'主干' AS `NAME`, 	null AS `PRODUCT`, 	'' AS `PRODUCTNAME`, 	null as `PROJECT`, 	'' AS `SCMPATH`  from dual  union all  SELECT 	t1.`BRANCH`, 	t1.`BUILDER`, 	t1.`DATE`, 	t1.`DELETED`, 	t1.`FILEPATH`, 	t1.`ID`, 	t1.`ID` AS `IDS`, 	(case when (select tt.`name` from zt_release tt where tt.build = t1.id and tt.deleted = '0'  order by tt.date desc LIMIT 0,1) is null then t1.`name` else (select tt.`name` from zt_release tt where tt.build = t1.id and tt.deleted = '0' order by tt.date desc LIMIT 0,1) end) AS `NAME`, 	t1.`PRODUCT`, 	t11.`NAME` AS `PRODUCTNAME`, 	t1.`PROJECT`, 	t1.`SCMPATH`  FROM 	`zt_build` t1 	LEFT JOIN zt_product t11 ON t1.PRODUCT = t11.ID where not EXISTS(select 1 from zt_release t2 where t2.build = t1.id and t2.`status` = 'terminate')) t1
					 WHERE 	t1.DELETED = '0'
						 AND ( t1.`PRODUCT` = #{srf.datacontext.bugproduct}  OR  t1.`PRODUCT` = #{srf.webcontext.bugproduct}   or t1.`PRODUCT` is null)
						 AND ( t1.`PROJECT` = #{srf.datacontext.bugproject}    or t1.`PROJECT` is null or #{srf.datacontext.bugproject} is null)
			]]>
    </sql>
    <!--数据查询[CurProduct]-->
    <sql id="CurProduct" databaseId="mysql">
		<![CDATA[ SELECT t1.`BRANCH`, t1.`BUILDER`, t1.BUILDER AS `BUILDERPK`, t1.`DATE`, t1.`DELETED`, t1.`FILEPATH`, t1.`ID`, t1.`NAME`, t1.`PRODUCT`, t11.`NAME` AS `PRODUCTNAME`, t1.`PROJECT`, t1.`SCMPATH` FROM `zt_build` t1  LEFT JOIN `zt_product` t11 ON t1.`PRODUCT` = t11.`ID`  
					 WHERE 	t1.DELETED = '0'
						 AND ( ( t1.`PRODUCT` = #{srf.datacontext.product}  OR  t1.`PRODUCT` = #{srf.webcontext.product} ) )
			]]>
    </sql>
    <!--数据查询[Default]-->
    <sql id="Default" databaseId="mysql">
		<![CDATA[ SELECT t1.`BRANCH`, t1.`BUILDER`, t1.BUILDER AS `BUILDERPK`, t1.`DATE`, t1.`DELETED`, t1.`FILEPATH`, t1.`ID`, t1.`NAME`, t1.`PRODUCT`, t11.`NAME` AS `PRODUCTNAME`, t1.`PROJECT`, t1.`SCMPATH` FROM `zt_build` t1  LEFT JOIN `zt_product` t11 ON t1.`PRODUCT` = t11.`ID`  
					 WHERE 	t1.DELETED = '0'
			]]>
    </sql>
    <!--数据查询[TestBuild]-->
    <sql id="TestBuild" databaseId="mysql">
		<![CDATA[ SELECT t1.`BRANCH`, t1.`BUILDER`, t1.`DATE`, t1.`DELETED`, t1.`FILEPATH`, t1.`ID`, case when (select t2.`name` from zt_release t2 where t2.build = t1.id and t2.deleted = '0' ORDER BY t2.date desc LIMIT 0,1) is null then t1.`name` else (select t2.`name` from zt_release t2 where t2.build = t1.id and t2.deleted = '0' ORDER BY t2.date desc LIMIT 0,1) end as `NAME`, t1.`PRODUCT`, t11.`NAME` AS `PRODUCTNAME`, t1.`PROJECT`, t1.`SCMPATH` FROM `zt_build` t1  LEFT JOIN zt_product t11 ON t1.PRODUCT = t11.ID
					 WHERE 	t1.DELETED = '0'
			]]>
    </sql>
    <!--数据查询[TestRounds]-->
    <sql id="TestRounds" databaseId="mysql">
		<![CDATA[ SELECT t1.`BRANCH`, t1.`BUILDER`, t1.BUILDER AS `BUILDERPK`, t1.`DATE`, t1.`DELETED`, t1.`FILEPATH`, t1.`ID`, t1.`NAME`, t1.`PRODUCT`, t11.`NAME` AS `PRODUCTNAME`, t1.`PROJECT`, t1.`SCMPATH` FROM `zt_build` t1  LEFT JOIN `zt_product` t11 ON t1.`PRODUCT` = t11.`ID`  
					 WHERE 	t1.DELETED = '0'
						 AND ( FIND_IN_SET(t1.id,(select tt.builds from zt_testreport tt where tt.id = #{srf.webcontext.srfparentkey})) )
			]]>
    </sql>
    <!--数据查询[UpdateLog]-->
    <sql id="UpdateLog" databaseId="mysql">
		<![CDATA[ SELECT t1.`BRANCH`, t1.`BUGS`, t1.`BUILDER`, t1.`DATE`, t1.`DELETED`, t1.`DESC`, t1.`FILEPATH`, t1.`ID`, CONCAT_WS('','PMS ',t1.`name`,' 主要更新') as `NAME`, t1.`PRODUCT`, t11.`NAME` AS `PRODUCTNAME`, t1.`PROJECT`, t1.`SCMPATH`, t1.`STORIES` FROM `zt_build` t1  LEFT JOIN zt_product t11 ON t1.PRODUCT = t11.ID
					 WHERE 	t1.deleted = '0'
			]]>
    </sql>
    <!--数据查询[View]-->
    <sql id="View" databaseId="mysql">
		<![CDATA[ SELECT t1.`BRANCH`, t1.`BUGS`, t1.`BUILDER`, t1.BUILDER AS `BUILDERPK`, t1.`DATE`, t1.`DELETED`, t1.`DESC`, t1.`FILEPATH`, t1.`ID`, t1.`NAME`, t1.`PRODUCT`, t11.`NAME` AS `PRODUCTNAME`, t1.`PROJECT`, t1.`SCMPATH`, t1.`STORIES` FROM `zt_build` t1  LEFT JOIN `zt_product` t11 ON t1.`PRODUCT` = t11.`ID`  
					 WHERE 	t1.DELETED = '0'
			]]>
    </sql>
</mapper>


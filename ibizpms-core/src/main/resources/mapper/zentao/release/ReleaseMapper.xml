<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper	namespace="cn.ibizlab.pms.core.zentao.mapper.ReleaseMapper">

    <!--该方法用于重写mybatis中selectById方法，以实现查询逻辑属性-->
	<select id="selectById"  resultMap="ReleaseResultMap" databaseId="mysql">
        <![CDATA[select t1.* from (SELECT t1.`BRANCH`, t1.`BUGS`, t1.`BUILD`, t21.`DATE` AS `BUILDDATE`, t21.`BUILDER`, t21.`NAME` AS `BUILDNAME`, t1.`DATE`, t1.`DELETED`, t1.`DESC`, t1.`ID`, t1.`LEFTBUGS`, t1.`MARKER`, t1.`NAME`, t1.`PRODUCT`, t11.`NAME` AS `PRODUCTNAME`, t1.`STATUS`, t1.`STORIES`, t1.`SUBSTATUS` FROM `zt_release` t1  LEFT JOIN `zt_product` t11 ON t1.`PRODUCT` = t11.`ID`  LEFT JOIN `zt_build` t21 ON t1.`BUILD` = t21.`ID`  ) t1 where id=#{id}]]>
    </select>

    <!--通过mybatis将查询结果注入到entity中,通过配置autoMapping="true"由mybatis自动处理映射关系 -->
    <resultMap id="ReleaseResultMap" type="cn.ibizlab.pms.core.zentao.domain.Release" autoMapping="true">
		<id property="id" column="id" /><!--主键字段映射-->
		<result property="product" column="product" />
		<result property="build" column="build" />
		<result property="branch" column="branch" />


		<!--通过mybatis自动注入关系属性[主实体]，fetchType="lazy"为懒加载配置 -->
		<association property="ztbranch" javaType="cn.ibizlab.pms.core.zentao.domain.Branch" column="branch" select="cn.ibizlab.pms.core.zentao.mapper.BranchMapper.selectById" fetchType="lazy"></association>
		<!--通过mybatis自动注入关系属性[主实体]，fetchType="lazy"为懒加载配置 -->
		<association property="ztbuild" javaType="cn.ibizlab.pms.core.zentao.domain.Build" column="build" select="cn.ibizlab.pms.core.zentao.mapper.BuildMapper.selectById" fetchType="lazy"></association>
		<!--通过mybatis自动注入关系属性[主实体]，fetchType="lazy"为懒加载配置 -->
		<association property="ztproduct" javaType="cn.ibizlab.pms.core.zentao.domain.Product" column="product" select="cn.ibizlab.pms.core.zentao.mapper.ProductMapper.selectById" fetchType="lazy"></association>
    </resultMap>

	<!--关系实体暴露select方法供主实体通过外键查询关系实体数据[实体关系名称:DER1N_ZT_RELEASE_ZT_BRANCH_BRANCH] -->
	 <select id="selectByBranch" resultMap="ReleaseResultMap">
         select t1.* from (
                <include refid="Default" />
			 ) t1
			 where  branch=#{id}
     </select>
	<!--关系实体暴露select方法供主实体通过外键查询关系实体数据[实体关系名称:DER1N_ZT_RELEASE_ZT_BUILD_BUILD] -->
	 <select id="selectByBuild" resultMap="ReleaseResultMap">
         select t1.* from (
                <include refid="Default" />
			 ) t1
			 where  build=#{id}
     </select>
	<!--关系实体暴露select方法供主实体通过外键查询关系实体数据[实体关系名称:DER1N_ZT_RELEASE_ZT_PRODUCT_PRODUCT] -->
	 <select id="selectByProduct" resultMap="ReleaseResultMap">
         select t1.* from (
                <include refid="Default" />
			 ) t1
			 where  product=#{id}
     </select>

    <!--数据集合[Default]-->
	 <select id="searchDefault"  parameterType="cn.ibizlab.pms.core.zentao.filter.ReleaseSearchContext"  resultMap="ReleaseResultMap">
         select t1.* from (
                <include refid="Default" />
         )t1
         <where><if test="ew!=null and ew.sqlSegment!=null and !ew.emptyOfWhere">${ew.sqlSegment}</if></where>
         <if test="ew!=null and ew.sqlSegment!=null and ew.emptyOfWhere">${ew.sqlSegment}</if>
     </select>

    <!--数据集合[ReportRelease]-->
	 <select id="searchReportRelease"  parameterType="cn.ibizlab.pms.core.zentao.filter.ReleaseSearchContext"  resultMap="ReleaseResultMap">
         select t1.* from (
                <include refid="ReportRelease" />
         )t1
         <where><if test="ew!=null and ew.sqlSegment!=null and !ew.emptyOfWhere">${ew.sqlSegment}</if></where>
         <if test="ew!=null and ew.sqlSegment!=null and ew.emptyOfWhere">${ew.sqlSegment}</if>
     </select>

    <!--数据查询[Default]-->
    <sql id="Default" databaseId="mysql">
		<![CDATA[ SELECT t1.`BRANCH`, t1.`BUILD`, t21.`DATE` AS `BUILDDATE`, t21.`BUILDER`, t21.`NAME` AS `BUILDNAME`, t1.`DATE`, t1.`DELETED`, t1.`ID`, t1.`MARKER`, t1.`NAME`, t1.`PRODUCT`, t11.`NAME` AS `PRODUCTNAME`, t1.`STATUS`, t1.`SUBSTATUS` FROM `zt_release` t1  LEFT JOIN `zt_product` t11 ON t1.`PRODUCT` = t11.`ID`  LEFT JOIN `zt_build` t21 ON t1.`BUILD` = t21.`ID`  
					 WHERE 	t1.DELETED = '0'
			]]>
    </sql>
    <!--数据查询[GetList]-->
    <sql id="GetList" databaseId="mysql">
		<![CDATA[ SELECT t1.`BRANCH`, t1.`BUILD`, t21.`DATE` AS `BUILDDATE`, t21.`BUILDER`, t21.`NAME` AS `BUILDNAME`, t1.`DATE`, t1.`DELETED`, t1.`ID`, t1.`MARKER`, t1.`NAME`, t1.`PRODUCT`, t11.`NAME` AS `PRODUCTNAME`, t1.`STATUS`, t1.`SUBSTATUS` FROM `zt_release` t1  LEFT JOIN `zt_product` t11 ON t1.`PRODUCT` = t11.`ID`  LEFT JOIN `zt_build` t21 ON t1.`BUILD` = t21.`ID`   ]]>
					 WHERE 	t1.DELETED = '0'
						 AND ( t1.`PRODUCT` = #{srf.datacontext.product}  AND  <choose><when test="srf.datacontext.status != null"> <![CDATA[ t1.`STATUS` =  #{srf.datacontext.status}  ]]> </when><otherwise>1=1</otherwise></choose> )
    </sql>
    <!--数据查询[ReportRelease]-->
    <sql id="ReportRelease" databaseId="mysql">
		<![CDATA[ SELECT t1.`BRANCH`, t1.`BUILD`, t21.`DATE` AS `BUILDDATE`, t21.`BUILDER`, t21.`NAME` AS `BUILDNAME`, t1.`DATE`, t1.`DELETED`, t1.`ID`, t1.`MARKER`, t1.`NAME`, t1.`PRODUCT`, t11.`NAME` AS `PRODUCTNAME`, t1.`STATUS`, t1.`SUBSTATUS` FROM `zt_release` t1  LEFT JOIN `zt_product` t11 ON t1.`PRODUCT` = t11.`ID`  LEFT JOIN `zt_build` t21 ON t1.`BUILD` = t21.`ID`  
					 WHERE 	t1.DELETED = '0'
						 AND ( FIND_IN_SET(t1.`ID`, (select tt.builds from zt_testreport tt where tt.id = #{srf.webcontext.srfparentkey})) )
			]]>
    </sql>
    <!--数据查询[View]-->
    <sql id="View" databaseId="mysql">
		<![CDATA[ SELECT t1.`BRANCH`, t1.`BUGS`, t1.`BUILD`, t21.`DATE` AS `BUILDDATE`, t21.`BUILDER`, t21.`NAME` AS `BUILDNAME`, t1.`DATE`, t1.`DELETED`, t1.`DESC`, t1.`ID`, t1.`LEFTBUGS`, t1.`MARKER`, t1.`NAME`, t1.`PRODUCT`, t11.`NAME` AS `PRODUCTNAME`, t1.`STATUS`, t1.`STORIES`, t1.`SUBSTATUS` FROM `zt_release` t1  LEFT JOIN `zt_product` t11 ON t1.`PRODUCT` = t11.`ID`  LEFT JOIN `zt_build` t21 ON t1.`BUILD` = t21.`ID`  
					 WHERE 	t1.DELETED = '0'
			]]>
    </sql>
</mapper>

